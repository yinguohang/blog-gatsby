{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/leetcode-21","result":{"data":{"markdownRemark":{"id":"e0fbdd5a-a5eb-580b-a1c9-6a922fee1810","html":"<p><a href=\"https://leetcode.com/problems/merge-two-sorted-lists/description/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Question URL</a>  </p>\n<h3 id=\"题目大意\" style=\"position:relative;\"><a href=\"#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F\" aria-label=\"题目大意 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>题目大意</h3>\n<p>合并两个有序链表</p>\n<h3 id=\"解题思路\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\" aria-label=\"解题思路 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解题思路</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> l1<span class=\"token punctuation\">,</span> ListNode<span class=\"token operator\">*</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span>\n        ListNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ans<span class=\"token punctuation\">;</span>\n        head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tail <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">;</span> \n        ListNode<span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">&amp;&amp;</span> p2 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">-></span> val <span class=\"token operator\">&lt;</span> p2 <span class=\"token operator\">-></span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tail <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span> \n                tail <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n                p1 <span class=\"token operator\">=</span> p1 <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                tail <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n                tail <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n                p2 <span class=\"token operator\">=</span> p2 <span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n            tail <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            tail <span class=\"token operator\">-></span> next <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span>\n        ans <span class=\"token operator\">=</span> head <span class=\"token operator\">-></span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span> head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/posts/leetcode-21","tagSlugs":["/tag/c/"]},"frontmatter":{"date":"2017-08-02 00:23:00 +0800","description":"Solution for Leetcode 21","tags":["C++"],"title":"Leetcode 21 Merge Two Sorted Lists","socialImage":null}}},"pageContext":{"slug":"/posts/leetcode-21"}}}